{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_20-86bc4c9984bc66bc1901473d63d013ed84324644",
  "solcVersion": "0.8.20",
  "solcLongVersion": "0.8.20+commit.a1b79de6",
  "userSourceNameMap": {
    "contracts/LitPKPExecutor.sol": "project/contracts/LitPKPExecutor.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/utils/cryptography/ECDSA.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/LitPKPExecutor.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title LitPKPExecutor\n * @dev ERC-7579 Executor Module that enables Lit Protocol PKP signing for smart accounts\n * @author Vincent Team\n */\ncontract LitPKPExecutor is ReentrancyGuard {\n    using ECDSA for bytes32;\n\n    // ERC-7579 Module Type - Executor\n    uint256 public constant MODULE_TYPE = 2;\n    \n    // Events\n    event ModuleInstalled(address indexed account, address indexed pkpAddress, bytes32 indexed pkpTokenId);\n    event ModuleUninstalled(address indexed account, address indexed pkpAddress);\n    event OperationExecuted(address indexed account, address indexed target, uint256 value, bytes data);\n    event PKPSignatureVerified(address indexed account, bytes32 operationHash, address pkpAddress);\n\n    // Errors\n    error InvalidModule();\n    error InvalidSignature();\n    error ExecutionFailed();\n    error ModuleNotInstalled();\n    error ModuleAlreadyInstalled();\n    error UnauthorizedPKP();\n\n    // Struct to store PKP information for each account\n    struct PKPInfo {\n        address pkpEthAddress;    // PKP Ethereum address\n        bytes32 pkpTokenId;       // PKP Token ID\n        bool isInstalled;         // Installation status\n    }\n\n    // Mapping from smart account address to PKP info\n    mapping(address => PKPInfo) public accountPKPs;\n\n    // Mapping to track if a PKP is already used by another account\n    mapping(address => address) public pkpToAccount;\n\n    /**\n     * @dev Install the module for a smart account\n     * @param data Encoded PKP data (pkpEthAddress, pkpTokenId)\n     */\n    function onInstall(bytes calldata data) external {\n        (address pkpEthAddress, bytes32 pkpTokenId) = abi.decode(data, (address, bytes32));\n        \n        if (accountPKPs[msg.sender].isInstalled) {\n            revert ModuleAlreadyInstalled();\n        }\n\n        if (pkpToAccount[pkpEthAddress] != address(0)) {\n            revert UnauthorizedPKP();\n        }\n\n        accountPKPs[msg.sender] = PKPInfo({\n            pkpEthAddress: pkpEthAddress,\n            pkpTokenId: pkpTokenId,\n            isInstalled: true\n        });\n\n        pkpToAccount[pkpEthAddress] = msg.sender;\n\n        emit ModuleInstalled(msg.sender, pkpEthAddress, pkpTokenId);\n    }\n\n    /**\n     * @dev Uninstall the module from a smart account\n     */\n    function onUninstall(bytes calldata) external {\n        PKPInfo storage pkpInfo = accountPKPs[msg.sender];\n        \n        if (!pkpInfo.isInstalled) {\n            revert ModuleNotInstalled();\n        }\n\n        address pkpEthAddress = pkpInfo.pkpEthAddress;\n        \n        delete accountPKPs[msg.sender];\n        delete pkpToAccount[pkpEthAddress];\n\n        emit ModuleUninstalled(msg.sender, pkpEthAddress);\n    }\n\n    /**\n     * @dev Check if the module is installed for an account\n     * @param account The smart account address\n     * @param moduleTypeId The module type ID (should be 2 for executor)\n     * @return True if module is installed\n     */\n    function isModuleInstalled(address account, uint256 moduleTypeId) external view returns (bool) {\n        if (moduleTypeId != MODULE_TYPE) {\n            return false;\n        }\n        return accountPKPs[account].isInstalled;\n    }\n\n    /**\n     * @dev Execute an operation signed by the PKP\n     * @param target The target contract address\n     * @param value The value to send\n     * @param data The call data\n     * @param pkpSignature The signature from the PKP\n     * @return result The result of the execution\n     */\n    function executeFromExecutor(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes calldata pkpSignature\n    ) external nonReentrant returns (bytes memory result) {\n        PKPInfo storage pkpInfo = accountPKPs[msg.sender];\n        \n        if (!pkpInfo.isInstalled) {\n            revert ModuleNotInstalled();\n        }\n\n        // Create the operation hash\n        bytes32 operationHash = keccak256(\n            abi.encodePacked(\n                msg.sender,  // smart account address\n                target,      // target address\n                value,       // value\n                data,        // call data\n                block.chainid, // chain ID to prevent replay attacks\n                address(this)  // executor address\n            )\n        );\n\n        // Verify the PKP signature\n        bytes32 ethSignedMessageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", operationHash));\n        address recoveredSigner = ECDSA.recover(ethSignedMessageHash, pkpSignature);\n\n        if (recoveredSigner != pkpInfo.pkpEthAddress) {\n            revert InvalidSignature();\n        }\n\n        emit PKPSignatureVerified(msg.sender, operationHash, pkpInfo.pkpEthAddress);\n\n        // Execute the operation\n        (bool success, bytes memory returnData) = target.call{value: value}(data);\n        \n        if (!success) {\n            revert ExecutionFailed();\n        }\n\n        emit OperationExecuted(msg.sender, target, value, data);\n        \n        return returnData;\n    }\n\n    /**\n     * @dev Get PKP information for an account\n     * @param account The smart account address\n     * @return pkpEthAddress The PKP Ethereum address\n     * @return pkpTokenId The PKP Token ID\n     * @return isInstalled Whether the module is installed\n     */\n    function getPKPInfo(address account) external view returns (\n        address pkpEthAddress,\n        bytes32 pkpTokenId,\n        bool isInstalled\n    ) {\n        PKPInfo storage pkpInfo = accountPKPs[account];\n        return (pkpInfo.pkpEthAddress, pkpInfo.pkpTokenId, pkpInfo.isInstalled);\n    }\n\n    /**\n     * @dev Create operation hash for signing\n     * @param account The smart account address\n     * @param target The target contract address\n     * @param value The value to send\n     * @param data The call data\n     * @return operationHash The hash to be signed\n     */\n    function getOperationHash(\n        address account,\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) external view returns (bytes32 operationHash) {\n        return keccak256(\n            abi.encodePacked(\n                account,     // smart account address\n                target,      // target address\n                value,       // value\n                data,        // call data\n                block.chainid, // chain ID\n                address(this)  // executor address\n            )\n        );\n    }\n\n    /**\n     * @dev Check if this contract supports ERC-7579\n     */\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\n        return interfaceId == type(IERC7579Module).interfaceId;\n    }\n}\n\n/**\n * @dev Interface for ERC-7579 modules\n */\ninterface IERC7579Module {\n    function onInstall(bytes calldata data) external;\n    function onUninstall(bytes calldata data) external;\n    function isModuleInstalled(address account, uint256 moduleTypeId) external view returns (bool);\n}"
      }
    }
  }
}